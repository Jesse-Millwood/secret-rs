// This file was generated by gir (fb75f57) from gir-files (???)
// DO NOT EDIT

use ffi;
use glib::translate::*;
use libc::c_void;

glib_wrapper! {
    pub struct Value(Shared<ffi::SecretValue>);

    match fn {
        ref => |ptr| ffi::secret_value_ref(ptr),
        unref => |ptr| ffi::secret_value_unref(ptr as *mut c_void),
    }
}

impl Value {

    //pub fn new(secret: &str, length: /*Unimplemented*/Fundamental: SSize, content_type: &str) -> Value {
    //    unsafe { TODO: call ffi::secret_value_new() }
    //}

    //pub fn new_full(secret: &str, length: /*Unimplemented*/Fundamental: SSize, content_type: &str, destroy: /*Unknown conversion*//*Unimplemented*/DestroyNotify) -> Value {
    //    unsafe { TODO: call ffi::secret_value_new_full() }
    //}

    //pub fn get(&self) -> (/*Unimplemented*/CArray TypeId { ns_id: 0, id: 3 }, /*Unimplemented*/Fundamental: Size) {
    //    unsafe { TODO: call ffi::secret_value_get() }
    //}

    pub fn get_content_type(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::secret_value_get_content_type(self.to_glib_none().0))
        }
    }

    pub fn get_text(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::secret_value_get_text(self.to_glib_none().0))
        }
    }
}
