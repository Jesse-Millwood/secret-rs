// This file was generated by gir (fb75f57) from gir-files (???)
// DO NOT EDIT

use ItemFlags;
use Service;
use Value;
use ffi;
use glib::translate::*;

glib_wrapper! {
    pub struct Item(Object<ffi::SecretItem>);

    match fn {
        get_type => || ffi::secret_item_get_type(),
    }
}

impl Item {
    //pub fn new_for_dbus_path_finish<T: IsA</*Ignored*/gio::AsyncResult>>(result: &T) -> Result<Item, Error> {
    //    unsafe { TODO: call ffi::secret_item_new_for_dbus_path_finish() }
    //}

    //pub fn new_for_dbus_path_sync(service: Option<&Service>, item_path: &str, flags: ItemFlags, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<Item, Error> {
    //    unsafe { TODO: call ffi::secret_item_new_for_dbus_path_sync() }
    //}

    //pub fn delete(&self, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_item_delete() }
    //}

    //pub fn delete_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_item_delete_finish() }
    //}

    //pub fn delete_sync(&self, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_item_delete_sync() }
    //}

    //pub fn get_attributes(&self) -> /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 } {
    //    unsafe { TODO: call ffi::secret_item_get_attributes() }
    //}

    pub fn get_created(&self) -> u64 {
        unsafe {
            ffi::secret_item_get_created(self.to_glib_none().0)
        }
    }

    pub fn get_flags(&self) -> ItemFlags {
        unsafe {
            from_glib(ffi::secret_item_get_flags(self.to_glib_none().0))
        }
    }

    pub fn get_label(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::secret_item_get_label(self.to_glib_none().0))
        }
    }

    pub fn get_locked(&self) -> bool {
        unsafe {
            from_glib(ffi::secret_item_get_locked(self.to_glib_none().0))
        }
    }

    pub fn get_modified(&self) -> u64 {
        unsafe {
            ffi::secret_item_get_modified(self.to_glib_none().0)
        }
    }

    pub fn get_schema_name(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::secret_item_get_schema_name(self.to_glib_none().0))
        }
    }

    pub fn get_secret(&self) -> Option<Value> {
        unsafe {
            from_glib_full(ffi::secret_item_get_secret(self.to_glib_none().0))
        }
    }

    pub fn get_service(&self) -> Option<Service> {
        unsafe {
            from_glib_none(ffi::secret_item_get_service(self.to_glib_none().0))
        }
    }

    //pub fn load_secret(&self, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_item_load_secret() }
    //}

    //pub fn load_secret_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_item_load_secret_finish() }
    //}

    //pub fn load_secret_sync(&self, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_item_load_secret_sync() }
    //}

    pub fn refresh(&self) {
        unsafe {
            ffi::secret_item_refresh(self.to_glib_none().0);
        }
    }

    //pub fn set_attributes(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_item_set_attributes() }
    //}

    //pub fn set_attributes_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_item_set_attributes_finish() }
    //}

    //pub fn set_attributes_sync(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_item_set_attributes_sync() }
    //}

    //pub fn set_label(&self, label: &str, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_item_set_label() }
    //}

    //pub fn set_label_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_item_set_label_finish() }
    //}

    //pub fn set_label_sync(&self, label: &str, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_item_set_label_sync() }
    //}

    //pub fn set_secret(&self, value: &Value, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_item_set_secret() }
    //}

    //pub fn set_secret_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_item_set_secret_finish() }
    //}

    //pub fn set_secret_sync(&self, value: &Value, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_item_set_secret_sync() }
    //}

    //pub fn create(collection: &Collection, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, label: &str, value: &Value, flags: ItemCreateFlags, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_item_create() }
    //}

    //pub fn create_finish<T: IsA</*Ignored*/gio::AsyncResult>>(result: &T) -> Result<Item, Error> {
    //    unsafe { TODO: call ffi::secret_item_create_finish() }
    //}

    //pub fn create_sync(collection: &Collection, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, label: &str, value: &Value, flags: ItemCreateFlags, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<Item, Error> {
    //    unsafe { TODO: call ffi::secret_item_create_sync() }
    //}

    //pub fn load_secrets(items: &[Item], cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_item_load_secrets() }
    //}

    //pub fn load_secrets_finish<T: IsA</*Ignored*/gio::AsyncResult>>(result: &T) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_item_load_secrets_finish() }
    //}

    //pub fn load_secrets_sync(items: &[Item], cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_item_load_secrets_sync() }
    //}

    //pub fn new_for_dbus_path(service: Option<&Service>, item_path: &str, flags: ItemFlags, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_item_new_for_dbus_path() }
    //}
}
