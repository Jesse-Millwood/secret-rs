// This file was generated by gir (fb75f57) from gir-files (???)
// DO NOT EDIT

use ffi;
use glib_ffi;
use glib::error::ErrorDomain;
use glib::translate::*;

#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
pub enum Error {
    Protocol,
    IsLocked,
    NoSuchObject,
    AlreadyExists,
    #[doc(hidden)]
    __Nonexhaustive(()),
}

#[doc(hidden)]
impl ToGlib for Error {
    type GlibType = ffi::SecretError;

    fn to_glib(&self) -> ffi::SecretError {
        match *self {
            Error::Protocol => ffi::SECRET_ERROR_PROTOCOL,
            Error::IsLocked => ffi::SECRET_ERROR_IS_LOCKED,
            Error::NoSuchObject => ffi::SECRET_ERROR_NO_SUCH_OBJECT,
            Error::AlreadyExists => ffi::SECRET_ERROR_ALREADY_EXISTS,
            Error::__Nonexhaustive(_) => panic!(),
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::SecretError> for Error {
    fn from_glib(value: ffi::SecretError) -> Self {
        skip_assert_initialized!();
        match value {
            ffi::SECRET_ERROR_PROTOCOL => Error::Protocol,
            ffi::SECRET_ERROR_IS_LOCKED => Error::IsLocked,
            ffi::SECRET_ERROR_NO_SUCH_OBJECT => Error::NoSuchObject,
            ffi::SECRET_ERROR_ALREADY_EXISTS => Error::AlreadyExists,
        }
    }
}

#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
pub enum SchemaAttributeType {
    String,
    Integer,
    Boolean,
    #[doc(hidden)]
    __Nonexhaustive(()),
}

#[doc(hidden)]
impl ToGlib for SchemaAttributeType {
    type GlibType = ffi::SecretSchemaAttributeType;

    fn to_glib(&self) -> ffi::SecretSchemaAttributeType {
        match *self {
            SchemaAttributeType::String => ffi::SECRET_SCHEMA_ATTRIBUTE_STRING,
            SchemaAttributeType::Integer => ffi::SECRET_SCHEMA_ATTRIBUTE_INTEGER,
            SchemaAttributeType::Boolean => ffi::SECRET_SCHEMA_ATTRIBUTE_BOOLEAN,
            SchemaAttributeType::__Nonexhaustive(_) => panic!(),
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::SecretSchemaAttributeType> for SchemaAttributeType {
    fn from_glib(value: ffi::SecretSchemaAttributeType) -> Self {
        skip_assert_initialized!();
        match value {
            ffi::SECRET_SCHEMA_ATTRIBUTE_STRING => SchemaAttributeType::String,
            ffi::SECRET_SCHEMA_ATTRIBUTE_INTEGER => SchemaAttributeType::Integer,
            ffi::SECRET_SCHEMA_ATTRIBUTE_BOOLEAN => SchemaAttributeType::Boolean,
        }
    }
}

