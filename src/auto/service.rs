// This file was generated by gir (fb75f57) from gir-files (???)
// DO NOT EDIT

use Collection;
use ServiceFlags;
use ffi;
use glib;
use glib::translate::*;

glib_wrapper! {
    pub struct Service(Object<ffi::SecretService>);

    match fn {
        get_type => || ffi::secret_service_get_type(),
    }
}

impl Service {
    //pub fn clear(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_service_clear() }
    //}

    //pub fn clear_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_service_clear_finish() }
    //}

    //pub fn clear_sync(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_service_clear_sync() }
    //}

    //pub fn create_collection_dbus_path(&self, properties: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 2, id: 173 }, alias: Option<&str>, flags: CollectionCreateFlags, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_service_create_collection_dbus_path() }
    //}

    //pub fn create_collection_dbus_path_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result<String, Error> {
    //    unsafe { TODO: call ffi::secret_service_create_collection_dbus_path_finish() }
    //}

    //pub fn create_collection_dbus_path_sync(&self, properties: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 2, id: 173 }, alias: Option<&str>, flags: CollectionCreateFlags, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<String, Error> {
    //    unsafe { TODO: call ffi::secret_service_create_collection_dbus_path_sync() }
    //}

    //pub fn create_item_dbus_path(&self, collection_path: &str, properties: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 2, id: 173 }, value: &Value, flags: ItemCreateFlags, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_service_create_item_dbus_path() }
    //}

    //pub fn create_item_dbus_path_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result<String, Error> {
    //    unsafe { TODO: call ffi::secret_service_create_item_dbus_path_finish() }
    //}

    //pub fn create_item_dbus_path_sync(&self, collection_path: &str, properties: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 2, id: 173 }, value: &Value, flags: ItemCreateFlags, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<String, Error> {
    //    unsafe { TODO: call ffi::secret_service_create_item_dbus_path_sync() }
    //}

    //pub fn decode_dbus_secret(&self, value: /*Ignored*/&glib::Variant) -> Option<Value> {
    //    unsafe { TODO: call ffi::secret_service_decode_dbus_secret() }
    //}

    //pub fn delete_item_dbus_path(&self, item_path: &str, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_service_delete_item_dbus_path() }
    //}

    //pub fn delete_item_dbus_path_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_service_delete_item_dbus_path_finish() }
    //}

    //pub fn delete_item_dbus_path_sync(&self, item_path: &str, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_service_delete_item_dbus_path_sync() }
    //}

    //pub fn encode_dbus_secret(&self, value: &Value) -> /*Ignored*/Option<glib::Variant> {
    //    unsafe { TODO: call ffi::secret_service_encode_dbus_secret() }
    //}

    //pub fn ensure_session(&self, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_service_ensure_session() }
    //}

    //pub fn ensure_session_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_service_ensure_session_finish() }
    //}

    //pub fn ensure_session_sync(&self, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_service_ensure_session_sync() }
    //}

    pub fn get_collection_gtype(&self) -> glib::types::Type {
        unsafe {
            from_glib(ffi::secret_service_get_collection_gtype(self.to_glib_none().0))
        }
    }

    pub fn get_collections(&self) -> Vec<Collection> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::secret_service_get_collections(self.to_glib_none().0))
        }
    }

    pub fn get_flags(&self) -> ServiceFlags {
        unsafe {
            from_glib(ffi::secret_service_get_flags(self.to_glib_none().0))
        }
    }

    pub fn get_item_gtype(&self) -> glib::types::Type {
        unsafe {
            from_glib(ffi::secret_service_get_item_gtype(self.to_glib_none().0))
        }
    }

    //pub fn get_secret_for_dbus_path(&self, item_path: &str, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_service_get_secret_for_dbus_path() }
    //}

    //pub fn get_secret_for_dbus_path_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result<Value, Error> {
    //    unsafe { TODO: call ffi::secret_service_get_secret_for_dbus_path_finish() }
    //}

    //pub fn get_secret_for_dbus_path_sync(&self, item_path: &str, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<Value, Error> {
    //    unsafe { TODO: call ffi::secret_service_get_secret_for_dbus_path_sync() }
    //}

    //pub fn get_secrets_for_dbus_paths(&self, item_paths: &str, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_service_get_secrets_for_dbus_paths() }
    //}

    //pub fn get_secrets_for_dbus_paths_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result</*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 1, id: 11 }, Error> {
    //    unsafe { TODO: call ffi::secret_service_get_secrets_for_dbus_paths_finish() }
    //}

    //pub fn get_secrets_for_dbus_paths_sync(&self, item_paths: &str, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result</*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 1, id: 11 }, Error> {
    //    unsafe { TODO: call ffi::secret_service_get_secrets_for_dbus_paths_sync() }
    //}

    pub fn get_session_algorithms(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::secret_service_get_session_algorithms(self.to_glib_none().0))
        }
    }

    pub fn get_session_dbus_path(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::secret_service_get_session_dbus_path(self.to_glib_none().0))
        }
    }

    //pub fn load_collections(&self, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_service_load_collections() }
    //}

    //pub fn load_collections_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_service_load_collections_finish() }
    //}

    //pub fn load_collections_sync(&self, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_service_load_collections_sync() }
    //}

    //pub fn lock(&self, objects: /*Ignored*/&[gio::DBusProxy], cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_service_lock() }
    //}

    //pub fn lock_dbus_paths(&self, paths: &str, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_service_lock_dbus_paths() }
    //}

    //pub fn lock_dbus_paths_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T, locked: /*Unimplemented*/Vec<String>) -> Result<i32, Error> {
    //    unsafe { TODO: call ffi::secret_service_lock_dbus_paths_finish() }
    //}

    //pub fn lock_dbus_paths_sync(&self, paths: &str, cancellable: /*Ignored*/Option<&gio::Cancellable>, locked: /*Unimplemented*/Vec<String>) -> Result<i32, Error> {
    //    unsafe { TODO: call ffi::secret_service_lock_dbus_paths_sync() }
    //}

    //pub fn lock_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T, locked: /*Unimplemented*/Vec<gio::DBusProxy>) -> Result<i32, Error> {
    //    unsafe { TODO: call ffi::secret_service_lock_finish() }
    //}

    //pub fn lock_sync(&self, objects: /*Ignored*/&[gio::DBusProxy], cancellable: /*Ignored*/Option<&gio::Cancellable>, locked: /*Unimplemented*/Vec<gio::DBusProxy>) -> Result<i32, Error> {
    //    unsafe { TODO: call ffi::secret_service_lock_sync() }
    //}

    //pub fn lookup(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_service_lookup() }
    //}

    //pub fn lookup_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result<Value, Error> {
    //    unsafe { TODO: call ffi::secret_service_lookup_finish() }
    //}

    //pub fn lookup_sync(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<Value, Error> {
    //    unsafe { TODO: call ffi::secret_service_lookup_sync() }
    //}

    //pub fn prompt(&self, prompt: &Prompt, return_type: /*Ignored*/Option<&glib::VariantTy>, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_service_prompt() }
    //}

    //pub fn prompt_at_dbus_path(&self, prompt_path: &str, return_type: /*Ignored*/Option<&glib::VariantTy>, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_service_prompt_at_dbus_path() }
    //}

    //pub fn prompt_at_dbus_path_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result</*Ignored*/glib::Variant, Error> {
    //    unsafe { TODO: call ffi::secret_service_prompt_at_dbus_path_finish() }
    //}

    //pub fn prompt_at_dbus_path_sync(&self, prompt_path: &str, cancellable: /*Ignored*/Option<&gio::Cancellable>, return_type: /*Ignored*/Option<&glib::VariantTy>) -> Result</*Ignored*/glib::Variant, Error> {
    //    unsafe { TODO: call ffi::secret_service_prompt_at_dbus_path_sync() }
    //}

    //pub fn prompt_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result</*Ignored*/glib::Variant, Error> {
    //    unsafe { TODO: call ffi::secret_service_prompt_finish() }
    //}

    //pub fn prompt_sync(&self, prompt: &Prompt, cancellable: /*Ignored*/Option<&gio::Cancellable>, return_type: /*Ignored*/&glib::VariantTy) -> Result</*Ignored*/glib::Variant, Error> {
    //    unsafe { TODO: call ffi::secret_service_prompt_sync() }
    //}

    //pub fn read_alias_dbus_path(&self, alias: &str, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_service_read_alias_dbus_path() }
    //}

    //pub fn read_alias_dbus_path_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result<String, Error> {
    //    unsafe { TODO: call ffi::secret_service_read_alias_dbus_path_finish() }
    //}

    //pub fn read_alias_dbus_path_sync(&self, alias: &str, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<String, Error> {
    //    unsafe { TODO: call ffi::secret_service_read_alias_dbus_path_sync() }
    //}

    //pub fn search(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, flags: SearchFlags, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_service_search() }
    //}

    //pub fn search_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result<Vec<Item>, Error> {
    //    unsafe { TODO: call ffi::secret_service_search_finish() }
    //}

    //pub fn search_for_dbus_paths(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_service_search_for_dbus_paths() }
    //}

    //pub fn search_for_dbus_paths_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T, unlocked: /*Unimplemented*/Vec<String>, locked: /*Unimplemented*/Vec<String>) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_service_search_for_dbus_paths_finish() }
    //}

    //pub fn search_for_dbus_paths_sync(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, cancellable: /*Ignored*/Option<&gio::Cancellable>, unlocked: /*Unimplemented*/Vec<String>, locked: /*Unimplemented*/Vec<String>) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_service_search_for_dbus_paths_sync() }
    //}

    //pub fn search_sync(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, flags: SearchFlags, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<Vec<Item>, Error> {
    //    unsafe { TODO: call ffi::secret_service_search_sync() }
    //}

    //pub fn set_alias(&self, alias: &str, collection: Option<&Collection>, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_service_set_alias() }
    //}

    //pub fn set_alias_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_service_set_alias_finish() }
    //}

    //pub fn set_alias_sync(&self, alias: &str, collection: Option<&Collection>, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_service_set_alias_sync() }
    //}

    //pub fn set_alias_to_dbus_path(&self, alias: &str, collection_path: Option<&str>, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_service_set_alias_to_dbus_path() }
    //}

    //pub fn set_alias_to_dbus_path_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_service_set_alias_to_dbus_path_finish() }
    //}

    //pub fn set_alias_to_dbus_path_sync(&self, alias: &str, collection_path: Option<&str>, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_service_set_alias_to_dbus_path_sync() }
    //}

    //pub fn store(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, collection: Option<&str>, label: &str, value: &Value, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_service_store() }
    //}

    //pub fn store_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_service_store_finish() }
    //}

    //pub fn store_sync(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, collection: Option<&str>, label: &str, value: &Value, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_service_store_sync() }
    //}

    //pub fn unlock(&self, objects: /*Ignored*/&[gio::DBusProxy], cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_service_unlock() }
    //}

    //pub fn unlock_dbus_paths(&self, paths: &str, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_service_unlock_dbus_paths() }
    //}

    //pub fn unlock_dbus_paths_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T, unlocked: /*Unimplemented*/Vec<String>) -> Result<i32, Error> {
    //    unsafe { TODO: call ffi::secret_service_unlock_dbus_paths_finish() }
    //}

    //pub fn unlock_dbus_paths_sync(&self, paths: &str, cancellable: /*Ignored*/Option<&gio::Cancellable>, unlocked: /*Unimplemented*/Vec<String>) -> Result<i32, Error> {
    //    unsafe { TODO: call ffi::secret_service_unlock_dbus_paths_sync() }
    //}

    //pub fn unlock_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T, unlocked: /*Unimplemented*/Vec<gio::DBusProxy>) -> Result<i32, Error> {
    //    unsafe { TODO: call ffi::secret_service_unlock_finish() }
    //}

    //pub fn unlock_sync(&self, objects: /*Ignored*/&[gio::DBusProxy], cancellable: /*Ignored*/Option<&gio::Cancellable>, unlocked: /*Unimplemented*/Vec<gio::DBusProxy>) -> Result<i32, Error> {
    //    unsafe { TODO: call ffi::secret_service_unlock_sync() }
    //}

    pub fn disconnect() {
        assert_initialized_main_thread!();
        unsafe {
            ffi::secret_service_disconnect();
        }
    }

    //pub fn get(flags: ServiceFlags, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_service_get() }
    //}

    //pub fn get_finish<T: IsA</*Ignored*/gio::AsyncResult>>(result: &T) -> Result<Service, Error> {
    //    unsafe { TODO: call ffi::secret_service_get_finish() }
    //}

    //pub fn get_sync(flags: ServiceFlags, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<Service, Error> {
    //    unsafe { TODO: call ffi::secret_service_get_sync() }
    //}

    //pub fn open(service_gtype: glib::types::Type, service_bus_name: Option<&str>, flags: ServiceFlags, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_service_open() }
    //}

    //pub fn open_finish<T: IsA</*Ignored*/gio::AsyncResult>>(result: &T) -> Result<Service, Error> {
    //    unsafe { TODO: call ffi::secret_service_open_finish() }
    //}

    //pub fn open_sync(service_gtype: glib::types::Type, service_bus_name: Option<&str>, flags: ServiceFlags, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<Service, Error> {
    //    unsafe { TODO: call ffi::secret_service_open_sync() }
    //}
}
