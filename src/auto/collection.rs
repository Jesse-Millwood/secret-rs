// This file was generated by gir (fb75f57) from gir-files (???)
// DO NOT EDIT

use CollectionFlags;
use Item;
use Service;
use ffi;
use glib::translate::*;

glib_wrapper! {
    pub struct Collection(Object<ffi::SecretCollection>);

    match fn {
        get_type => || ffi::secret_collection_get_type(),
    }
}

impl Collection {
    //pub fn new_for_dbus_path_finish<T: IsA</*Ignored*/gio::AsyncResult>>(result: &T) -> Result<Collection, Error> {
    //    unsafe { TODO: call ffi::secret_collection_new_for_dbus_path_finish() }
    //}

    //pub fn new_for_dbus_path_sync(service: Option<&Service>, collection_path: &str, flags: CollectionFlags, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<Collection, Error> {
    //    unsafe { TODO: call ffi::secret_collection_new_for_dbus_path_sync() }
    //}

    //pub fn delete(&self, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_collection_delete() }
    //}

    //pub fn delete_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_collection_delete_finish() }
    //}

    //pub fn delete_sync(&self, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_collection_delete_sync() }
    //}

    pub fn get_created(&self) -> u64 {
        unsafe {
            ffi::secret_collection_get_created(self.to_glib_none().0)
        }
    }

    pub fn get_flags(&self) -> CollectionFlags {
        unsafe {
            from_glib(ffi::secret_collection_get_flags(self.to_glib_none().0))
        }
    }

    pub fn get_items(&self) -> Vec<Item> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::secret_collection_get_items(self.to_glib_none().0))
        }
    }

    pub fn get_label(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::secret_collection_get_label(self.to_glib_none().0))
        }
    }

    pub fn get_locked(&self) -> bool {
        unsafe {
            from_glib(ffi::secret_collection_get_locked(self.to_glib_none().0))
        }
    }

    pub fn get_modified(&self) -> u64 {
        unsafe {
            ffi::secret_collection_get_modified(self.to_glib_none().0)
        }
    }

    pub fn get_service(&self) -> Option<Service> {
        unsafe {
            from_glib_none(ffi::secret_collection_get_service(self.to_glib_none().0))
        }
    }

    //pub fn load_items(&self, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_collection_load_items() }
    //}

    //pub fn load_items_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_collection_load_items_finish() }
    //}

    //pub fn load_items_sync(&self, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_collection_load_items_sync() }
    //}

    pub fn refresh(&self) {
        unsafe {
            ffi::secret_collection_refresh(self.to_glib_none().0);
        }
    }

    //pub fn search(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, flags: SearchFlags, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_collection_search() }
    //}

    //pub fn search_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result<Vec<Item>, Error> {
    //    unsafe { TODO: call ffi::secret_collection_search_finish() }
    //}

    //pub fn search_for_dbus_paths(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_collection_search_for_dbus_paths() }
    //}

    //pub fn search_for_dbus_paths_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result<Vec<String>, Error> {
    //    unsafe { TODO: call ffi::secret_collection_search_for_dbus_paths_finish() }
    //}

    //pub fn search_for_dbus_paths_sync(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<Vec<String>, Error> {
    //    unsafe { TODO: call ffi::secret_collection_search_for_dbus_paths_sync() }
    //}

    //pub fn search_sync(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, flags: SearchFlags, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<Vec<Item>, Error> {
    //    unsafe { TODO: call ffi::secret_collection_search_sync() }
    //}

    //pub fn set_label(&self, label: &str, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_collection_set_label() }
    //}

    //pub fn set_label_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_collection_set_label_finish() }
    //}

    //pub fn set_label_sync(&self, label: &str, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::secret_collection_set_label_sync() }
    //}

    //pub fn create(service: Option<&Service>, label: &str, alias: Option<&str>, flags: CollectionCreateFlags, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_collection_create() }
    //}

    //pub fn create_finish<T: IsA</*Ignored*/gio::AsyncResult>>(result: &T) -> Result<Collection, Error> {
    //    unsafe { TODO: call ffi::secret_collection_create_finish() }
    //}

    //pub fn create_sync(service: Option<&Service>, label: &str, alias: Option<&str>, flags: CollectionCreateFlags, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<Collection, Error> {
    //    unsafe { TODO: call ffi::secret_collection_create_sync() }
    //}

    //pub fn for_alias(service: Option<&Service>, alias: &str, flags: CollectionFlags, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_collection_for_alias() }
    //}

    //pub fn for_alias_finish<T: IsA</*Ignored*/gio::AsyncResult>>(result: &T) -> Result<Collection, Error> {
    //    unsafe { TODO: call ffi::secret_collection_for_alias_finish() }
    //}

    //pub fn for_alias_sync(service: Option<&Service>, alias: &str, flags: CollectionFlags, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<Collection, Error> {
    //    unsafe { TODO: call ffi::secret_collection_for_alias_sync() }
    //}

    //pub fn new_for_dbus_path(service: Option<&Service>, collection_path: &str, flags: CollectionFlags, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::secret_collection_new_for_dbus_path() }
    //}
}
