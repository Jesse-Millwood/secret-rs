// This file was generated by gir (fb75f57) from gir-files (???)
// DO NOT EDIT

use ffi;
use glib::translate::*;

bitflags! {
    pub flags CollectionCreateFlags: u32 {
        const COLLECTION_CREATE_NONE = 0,
    }
}

#[doc(hidden)]
impl ToGlib for CollectionCreateFlags {
    type GlibType = ffi::SecretCollectionCreateFlags;

    fn to_glib(&self) -> ffi::SecretCollectionCreateFlags {
        ffi::SecretCollectionCreateFlags::from_bits_truncate(self.bits())
    }
}

#[doc(hidden)]
impl FromGlib<ffi::SecretCollectionCreateFlags> for CollectionCreateFlags {
    fn from_glib(value: ffi::SecretCollectionCreateFlags) -> CollectionCreateFlags {
        skip_assert_initialized!();
        CollectionCreateFlags::from_bits_truncate(value.bits())
    }
}

bitflags! {
    pub flags CollectionFlags: u32 {
        const COLLECTION_NONE = 0,
        const COLLECTION_LOAD_ITEMS = 2,
    }
}

#[doc(hidden)]
impl ToGlib for CollectionFlags {
    type GlibType = ffi::SecretCollectionFlags;

    fn to_glib(&self) -> ffi::SecretCollectionFlags {
        ffi::SecretCollectionFlags::from_bits_truncate(self.bits())
    }
}

#[doc(hidden)]
impl FromGlib<ffi::SecretCollectionFlags> for CollectionFlags {
    fn from_glib(value: ffi::SecretCollectionFlags) -> CollectionFlags {
        skip_assert_initialized!();
        CollectionFlags::from_bits_truncate(value.bits())
    }
}

bitflags! {
    pub flags ItemCreateFlags: u32 {
        const ITEM_CREATE_NONE = 0,
        const ITEM_CREATE_REPLACE = 2,
    }
}

#[doc(hidden)]
impl ToGlib for ItemCreateFlags {
    type GlibType = ffi::SecretItemCreateFlags;

    fn to_glib(&self) -> ffi::SecretItemCreateFlags {
        ffi::SecretItemCreateFlags::from_bits_truncate(self.bits())
    }
}

#[doc(hidden)]
impl FromGlib<ffi::SecretItemCreateFlags> for ItemCreateFlags {
    fn from_glib(value: ffi::SecretItemCreateFlags) -> ItemCreateFlags {
        skip_assert_initialized!();
        ItemCreateFlags::from_bits_truncate(value.bits())
    }
}

bitflags! {
    pub flags ItemFlags: u32 {
        const ITEM_NONE = 0,
        const ITEM_LOAD_SECRET = 2,
    }
}

#[doc(hidden)]
impl ToGlib for ItemFlags {
    type GlibType = ffi::SecretItemFlags;

    fn to_glib(&self) -> ffi::SecretItemFlags {
        ffi::SecretItemFlags::from_bits_truncate(self.bits())
    }
}

#[doc(hidden)]
impl FromGlib<ffi::SecretItemFlags> for ItemFlags {
    fn from_glib(value: ffi::SecretItemFlags) -> ItemFlags {
        skip_assert_initialized!();
        ItemFlags::from_bits_truncate(value.bits())
    }
}

bitflags! {
    pub flags SchemaFlags: u32 {
        const SCHEMA_NONE = 0,
        const SCHEMA_DONT_MATCH_NAME = 2,
    }
}

#[doc(hidden)]
impl ToGlib for SchemaFlags {
    type GlibType = ffi::SecretSchemaFlags;

    fn to_glib(&self) -> ffi::SecretSchemaFlags {
        ffi::SecretSchemaFlags::from_bits_truncate(self.bits())
    }
}

#[doc(hidden)]
impl FromGlib<ffi::SecretSchemaFlags> for SchemaFlags {
    fn from_glib(value: ffi::SecretSchemaFlags) -> SchemaFlags {
        skip_assert_initialized!();
        SchemaFlags::from_bits_truncate(value.bits())
    }
}

bitflags! {
    pub flags SearchFlags: u32 {
        const SEARCH_NONE = 0,
        const SEARCH_ALL = 2,
        const SEARCH_UNLOCK = 4,
        const SEARCH_LOAD_SECRETS = 8,
    }
}

#[doc(hidden)]
impl ToGlib for SearchFlags {
    type GlibType = ffi::SecretSearchFlags;

    fn to_glib(&self) -> ffi::SecretSearchFlags {
        ffi::SecretSearchFlags::from_bits_truncate(self.bits())
    }
}

#[doc(hidden)]
impl FromGlib<ffi::SecretSearchFlags> for SearchFlags {
    fn from_glib(value: ffi::SecretSearchFlags) -> SearchFlags {
        skip_assert_initialized!();
        SearchFlags::from_bits_truncate(value.bits())
    }
}

bitflags! {
    pub flags ServiceFlags: u32 {
        const SERVICE_NONE = 0,
        const SERVICE_OPEN_SESSION = 2,
        const SERVICE_LOAD_COLLECTIONS = 4,
    }
}

#[doc(hidden)]
impl ToGlib for ServiceFlags {
    type GlibType = ffi::SecretServiceFlags;

    fn to_glib(&self) -> ffi::SecretServiceFlags {
        ffi::SecretServiceFlags::from_bits_truncate(self.bits())
    }
}

#[doc(hidden)]
impl FromGlib<ffi::SecretServiceFlags> for ServiceFlags {
    fn from_glib(value: ffi::SecretServiceFlags) -> ServiceFlags {
        skip_assert_initialized!();
        ServiceFlags::from_bits_truncate(value.bits())
    }
}

